#include "sc2api/sc2_interfaces.h"
#include "sc2api/sc2_agent.h"
#include "sc2api/sc2_map_info.h"
#include "sc2api/sc2_api.h"
#include "sc2lib/sc2_lib.h"
#include "Strategys.h"

BuildingOrder Safe_Initial[] =
{
	BuildingOrder(UNIT_TYPEID::PROTOSS_GATEWAY, 1),
	BuildingOrder(UNIT_TYPEID::PROTOSS_CYBERNETICSCORE, 1),
	BuildingOrder(UNIT_TYPEID::PROTOSS_MOTHERSHIPCORE, 1)
};

BuildingOrder ZealotRush_Initial[] =
{
	BuildingOrder(UNIT_TYPEID::PROTOSS_GATEWAY, 2),
	BuildingOrder(UNIT_TYPEID::PROTOSS_ZEALOT, 10),
	BuildingOrder(UNIT_TYPEID::PROTOSS_GATEWAY, 2),
	BuildingOrder(UNIT_TYPEID::PROTOSS_FORGE, 1)
};

BuildingOrder Zealot_Continuous[] =
{
	BuildingOrder(UNIT_TYPEID::PROTOSS_ZEALOT, 3),
	BuildingOrder(UNIT_TYPEID::PROTOSS_STALKER, 3)

};

ATTACK_TYPE Strategy::CanAttack(UNIT_TYPEID UnitType)
{
	switch (UnitType) {
	case UNIT_TYPEID::TERRAN_BANSHEE: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::TERRAN_BATTLECRUISER: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::TERRAN_CYCLONE: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::TERRAN_GHOST: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::TERRAN_HELLION: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::TERRAN_HELLIONTANK: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::TERRAN_LIBERATOR: ATTACK_TYPE::FLYING;
	case UNIT_TYPEID::TERRAN_LIBERATORAG: ATTACK_TYPE::FLYING;
	case UNIT_TYPEID::TERRAN_MARAUDER: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::TERRAN_MARINE: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::TERRAN_MEDIVAC: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::TERRAN_MULE: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::TERRAN_RAVEN: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::TERRAN_REAPER: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::TERRAN_SCV: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::TERRAN_SIEGETANK: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::TERRAN_SIEGETANKSIEGED: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::TERRAN_THOR: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::TERRAN_THORAP: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::TERRAN_VIKINGASSAULT: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::TERRAN_VIKINGFIGHTER: return ATTACK_TYPE::FLYING;
	case UNIT_TYPEID::ZERG_BANELING: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::ZERG_BROODLING: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::ZERG_BROODLORD: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::ZERG_BROODLORDCOCOON: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::ZERG_CHANGELING: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::ZERG_CHANGELINGMARINE: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::ZERG_CHANGELINGMARINESHIELD: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::ZERG_CHANGELINGZEALOT: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::ZERG_CHANGELINGZERGLING: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::ZERG_CHANGELINGZERGLINGWINGS: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::ZERG_CORRUPTOR: return ATTACK_TYPE::FLYING;
	case UNIT_TYPEID::ZERG_DRONE: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::ZERG_HYDRALISK:  return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::ZERG_INFESTEDTERRANSEGG: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::ZERG_INFESTOR: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::ZERG_INFESTORTERRAN: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::ZERG_LOCUSTMP: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::ZERG_LOCUSTMPFLYING: return ATTACK_TYPE::FLYING;
	case UNIT_TYPEID::ZERG_LURKERMP: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::ZERG_MUTALISK: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::ZERG_OVERLORD: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::ZERG_OVERLORDTRANSPORT: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::ZERG_OVERSEER: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::ZERG_QUEEN: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::ZERG_RAVAGER: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::ZERG_ROACH: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::ZERG_SPINECRAWLERUPROOTED: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::ZERG_SPORECRAWLERUPROOTED: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::ZERG_SWARMHOSTBURROWEDMP: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::ZERG_SWARMHOSTMP: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::ZERG_TRANSPORTOVERLORDCOCOON: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::ZERG_ULTRALISK: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::ZERG_VIPER: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::ZERG_ZERGLING: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::PROTOSS_ADEPT: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::PROTOSS_ARCHON: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::PROTOSS_CARRIER: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::PROTOSS_COLOSSUS: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::PROTOSS_DARKTEMPLAR: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::PROTOSS_DISRUPTOR: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::PROTOSS_HIGHTEMPLAR: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::PROTOSS_IMMORTAL: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::PROTOSS_INTERCEPTOR: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::PROTOSS_MOTHERSHIP: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::PROTOSS_MOTHERSHIPCORE: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::PROTOSS_OBSERVER: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::PROTOSS_ORACLE: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::PROTOSS_PHOENIX: return ATTACK_TYPE::FLYING;
	case UNIT_TYPEID::PROTOSS_PROBE: return ATTACK_TYPE::GROUND;
	case UNIT_TYPEID::PROTOSS_SENTRY: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::PROTOSS_STALKER: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::PROTOSS_TEMPEST: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::PROTOSS_VOIDRAY: return ATTACK_TYPE::BOTH;
	case UNIT_TYPEID::PROTOSS_WARPPRISM: return ATTACK_TYPE::NONE;
	case UNIT_TYPEID::PROTOSS_ZEALOT: return ATTACK_TYPE::GROUND;
	}
	return ATTACK_TYPE::NONE;

}
bool Strategy::IsBuilding(sc2::UNIT_TYPEID UnitType)
{
	switch (UnitType)
	{
		case sc2::UNIT_TYPEID::TERRAN_ARMORY:           return true;
		case sc2::UNIT_TYPEID::PROTOSS_ASSIMILATOR:     return true;
		case sc2::UNIT_TYPEID::ZERG_BANELINGNEST:       return true;
		case sc2::UNIT_TYPEID::TERRAN_BARRACKS:         return true;
		case sc2::UNIT_TYPEID::TERRAN_BARRACKSREACTOR:  return true;
		case sc2::UNIT_TYPEID::TERRAN_BARRACKSTECHLAB:  return true;
		case sc2::UNIT_TYPEID::TERRAN_BUNKER:           return true;
		case sc2::UNIT_TYPEID::TERRAN_COMMANDCENTER:    return true;
		case sc2::UNIT_TYPEID::PROTOSS_CYBERNETICSCORE: return true;
		case sc2::UNIT_TYPEID::PROTOSS_DARKSHRINE:      return true;
		case sc2::UNIT_TYPEID::TERRAN_ENGINEERINGBAY:   return true;
		case sc2::UNIT_TYPEID::ZERG_EVOLUTIONCHAMBER:   return true;
		case sc2::UNIT_TYPEID::ZERG_EXTRACTOR:          return true;
		case sc2::UNIT_TYPEID::TERRAN_FACTORY:          return true;
		case sc2::UNIT_TYPEID::TERRAN_FACTORYREACTOR:   return true;
		case sc2::UNIT_TYPEID::TERRAN_FACTORYTECHLAB:   return true;
		case sc2::UNIT_TYPEID::PROTOSS_FLEETBEACON:     return true;
		case sc2::UNIT_TYPEID::PROTOSS_FORGE:           return true;
		case sc2::UNIT_TYPEID::TERRAN_FUSIONCORE:       return true;
		case sc2::UNIT_TYPEID::PROTOSS_GATEWAY:         return true;
		case sc2::UNIT_TYPEID::PROTOSS_WARPGATE:        return true;
		case sc2::UNIT_TYPEID::TERRAN_GHOSTACADEMY:     return true;
		case sc2::UNIT_TYPEID::ZERG_HATCHERY:           return true;
		case sc2::UNIT_TYPEID::ZERG_HYDRALISKDEN:       return true;
		case sc2::UNIT_TYPEID::ZERG_INFESTATIONPIT:     return true;
		case sc2::UNIT_TYPEID::TERRAN_MISSILETURRET:    return true;
		case sc2::UNIT_TYPEID::PROTOSS_NEXUS:           return true;
		case sc2::UNIT_TYPEID::ZERG_NYDUSCANAL:         return true;
		case sc2::UNIT_TYPEID::ZERG_NYDUSNETWORK:       return true;
		case sc2::UNIT_TYPEID::PROTOSS_PHOTONCANNON:    return true;
		case sc2::UNIT_TYPEID::PROTOSS_PYLON:           return true;
		case sc2::UNIT_TYPEID::TERRAN_REFINERY:         return true;
		case sc2::UNIT_TYPEID::ZERG_ROACHWARREN:        return true;
		case sc2::UNIT_TYPEID::PROTOSS_ROBOTICSBAY:     return true;
		case sc2::UNIT_TYPEID::PROTOSS_ROBOTICSFACILITY: return true;
		case sc2::UNIT_TYPEID::TERRAN_SENSORTOWER:      return true;
		case sc2::UNIT_TYPEID::ZERG_SPAWNINGPOOL:       return true;
		case sc2::UNIT_TYPEID::ZERG_SPINECRAWLER:       return true;
		case sc2::UNIT_TYPEID::ZERG_SPIRE:              return true;
		case sc2::UNIT_TYPEID::ZERG_SPORECRAWLER:       return true;
		case sc2::UNIT_TYPEID::PROTOSS_STARGATE:        return true;
		case sc2::UNIT_TYPEID::TERRAN_STARPORT:         return true;
		case sc2::UNIT_TYPEID::TERRAN_STARPORTREACTOR:  return true;
		case sc2::UNIT_TYPEID::TERRAN_STARPORTTECHLAB:  return true;
		case sc2::UNIT_TYPEID::TERRAN_SUPPLYDEPOT:      return true;
		case sc2::UNIT_TYPEID::PROTOSS_TEMPLARARCHIVE:  return true;
		case sc2::UNIT_TYPEID::PROTOSS_TWILIGHTCOUNCIL: return true;
		case sc2::UNIT_TYPEID::ZERG_ULTRALISKCAVERN:    return true;
		case sc2::UNIT_TYPEID::ZERG_HIVE:               return true;
		case sc2::UNIT_TYPEID::ZERG_LAIR:               return true;
		case sc2::UNIT_TYPEID::ZERG_GREATERSPIRE:       return true;
		case sc2::UNIT_TYPEID::TERRAN_ORBITALCOMMAND:   return true;
		case sc2::UNIT_TYPEID::TERRAN_PLANETARYFORTRESS: return true;
		default: return false;
	}
}

sc2::UNIT_TYPEID Strategy::GetBuildingFor(sc2::UNIT_TYPEID InType)
{
	switch (InType)
	{
		case sc2::UNIT_TYPEID::PROTOSS_PROBE:
		case sc2::UNIT_TYPEID::PROTOSS_MOTHERSHIPCORE:
		case sc2::UNIT_TYPEID::PROTOSS_MOTHERSHIP:
			return sc2::UNIT_TYPEID::PROTOSS_NEXUS;

		case sc2::UNIT_TYPEID::PROTOSS_ZEALOT:
		case sc2::UNIT_TYPEID::PROTOSS_STALKER:
		case sc2::UNIT_TYPEID::PROTOSS_SENTRY:
		case sc2::UNIT_TYPEID::PROTOSS_ADEPT:
		case sc2::UNIT_TYPEID::PROTOSS_HIGHTEMPLAR:
		case sc2::UNIT_TYPEID::PROTOSS_DARKTEMPLAR:
			return sc2::UNIT_TYPEID::PROTOSS_GATEWAY;

		case sc2::UNIT_TYPEID::PROTOSS_IMMORTAL:
		case sc2::UNIT_TYPEID::PROTOSS_COLOSSUS:
		case sc2::UNIT_TYPEID::PROTOSS_DISRUPTOR:
		case sc2::UNIT_TYPEID::PROTOSS_OBSERVER:
		case sc2::UNIT_TYPEID::PROTOSS_WARPPRISM:
			return sc2::UNIT_TYPEID::PROTOSS_ROBOTICSFACILITY;

		case sc2::UNIT_TYPEID::PROTOSS_PHOENIX:
		case sc2::UNIT_TYPEID::PROTOSS_VOIDRAY:
		case sc2::UNIT_TYPEID::PROTOSS_ORACLE:
		case sc2::UNIT_TYPEID::PROTOSS_CARRIER:
		case sc2::UNIT_TYPEID::PROTOSS_TEMPEST:
			return sc2::UNIT_TYPEID::PROTOSS_STARGATE;

		default:
			return sc2::UNIT_TYPEID::INVALID;
	}
}
